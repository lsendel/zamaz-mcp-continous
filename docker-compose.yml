# Claude Remote Client Docker Compose Configuration
# This file provides a complete deployment setup for Claude Remote Client

version: '3.8'

services:
  claude-remote-client:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    
    # Alternative: use pre-built image
    # image: claude-remote-client:latest
    
    container_name: claude-remote-client
    hostname: claude-bot
    
    # Environment variables
    environment:
      # Slack configuration (required)
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_CHANNEL_ID=${SLACK_CHANNEL_ID}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET:-}
      
      # Claude configuration
      - CLAUDE_CLI_PATH=${CLAUDE_CLI_PATH:-claude}
      - CLAUDE_TIMEOUT=${CLAUDE_TIMEOUT:-300}
      
      # Application settings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_SESSIONS=${MAX_SESSIONS:-10}
      - TASK_QUEUE_SIZE=${TASK_QUEUE_SIZE:-100}
      
      # Container-specific settings
      - CLAUDE_REMOTE_CLIENT_CONFIG=/app/config/config.yaml
      - CLAUDE_REMOTE_CLIENT_DATA_DIR=/app/data
    
    # Volume mounts
    volumes:
      # Configuration file (required)
      - ./config.yaml:/app/config/config.yaml:ro
      
      # Project directories (adjust paths as needed)
      - ${PROJECTS_DIR:-./projects}:/projects:rw
      
      # Data persistence
      - claude-data:/app/data
      
      # Logs (optional, for external log management)
      - claude-logs:/app/logs
      
      # Claude CLI binary (if not installed in container)
      # - /usr/local/bin/claude:/usr/local/bin/claude:ro
    
    # Network configuration
    networks:
      - claude-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # User namespace
    user: "1000:1000"  # Adjust to match your user ID
    
    # Dependencies
    depends_on:
      - redis  # Optional: for advanced session management
    
    # Labels for management
    labels:
      - "com.claude-remote-client.service=main"
      - "com.claude-remote-client.version=${VERSION:-latest}"

  # Optional: Redis for advanced session/queue management
  redis:
    image: redis:7-alpine
    container_name: claude-redis
    hostname: redis
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    
    # Volume for persistence
    volumes:
      - redis-data:/data
    
    # Network
    networks:
      - claude-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    
    # Labels
    labels:
      - "com.claude-remote-client.service=redis"

  # Optional: Monitoring with Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    hostname: prometheus
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Volumes
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Ports
    ports:
      - "9090:9090"
    
    # Network
    networks:
      - claude-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    
    # Restart policy
    restart: unless-stopped
    
    # Labels
    labels:
      - "com.claude-remote-client.service=monitoring"

  # Optional: Log aggregation with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    hostname: grafana
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Ports
    ports:
      - "3000:3000"
    
    # Network
    networks:
      - claude-network
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    
    # Restart policy
    restart: unless-stopped
    
    # Labels
    labels:
      - "com.claude-remote-client.service=monitoring"

# Networks
networks:
  claude-network:
    driver: bridge
    name: claude-network

# Volumes
volumes:
  claude-data:
    name: claude-data
    driver: local
  
  claude-logs:
    name: claude-logs
    driver: local
  
  redis-data:
    name: redis-data
    driver: local
  
  prometheus-data:
    name: prometheus-data
    driver: local
  
  grafana-data:
    name: grafana-data
    driver: local

# Secrets (for production use)
secrets:
  slack_bot_token:
    external: true
  slack_signing_secret:
    external: true